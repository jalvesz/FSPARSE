#:include "include/common.fypp"
#:set RANKS = range(1, 2+1)
#:set KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
#:def rksfx2(rank)
#{if rank > 0}#${":," + ":," * (rank - 1)}$#{endif}#
#:enddef
!>---------------------------------------------------
!> Copyright 2023-present Transvalor S.A. (JosÃ© R. Alves Z.)
!>
!> Use of this source code is governed by a MIT
!> license that can be found in the LICENSE.md file
!>---------------------------------------------------
module fsparse_matvec
    use fsparse_constants
    use fsparse_matrix_gallery
    implicit none
    private

    public :: matvec
    interface matvec ! call matvec(matrix,vec_x,vec_y) => vec_y = matrix * vec_x
        #:for k1, t1, s1 in (KINDS_TYPES)
        #:for rank in RANKS
        module procedure matvec_coo_${rank}$d_${s1}$
        module procedure matvec_csr_${rank}$d_${s1}$
        module procedure matvec_csc_${rank}$d_${s1}$
        module procedure matvec_ell_${rank}$d_${s1}$

        #:endfor
        #:endfor
    end interface

contains

    !! matvec_coo
    #:for k1, t1, s1 in (KINDS_TYPES)
    #:for rank in RANKS
    subroutine matvec_coo_${rank}$d_${s1}$(matrix,vec_x,vec_y)
        type(COO_${s1}$), intent(in) :: matrix
        ${t1}$, intent(in)    :: vec_x${ranksuffix(rank)}$
        ${t1}$, intent(inout) :: vec_y${ranksuffix(rank)}$
        integer :: k, ik, jk

        associate( data => matrix%data, index => matrix%index, sym => matrix%sym, nnz => matrix%nnz )
            if( sym == k_NOSYMMETRY) then
                do concurrent (k = 1:nnz)
                    ik = index(1,k)
                    jk = index(2,k)
                    vec_y(${rksfx2(rank-1)}$ik) = vec_y(${rksfx2(rank-1)}$ik) + data(k) * vec_x(${rksfx2(rank-1)}$jk)
                end do

            else 
                do concurrent (k = 1:nnz)
                    ik = index(1,k)
                    jk = index(2,k)
                    vec_y(${rksfx2(rank-1)}$ik) = vec_y(${rksfx2(rank-1)}$ik) + data(k) * vec_x(${rksfx2(rank-1)}$jk)
                    if( ik==jk ) cycle
                    vec_y(${rksfx2(rank-1)}$jk) = vec_y(${rksfx2(rank-1)}$jk) + data(k) * vec_x(${rksfx2(rank-1)}$ik)
                end do

            end if
        end associate
    end subroutine

    #:endfor
    #:endfor

    !! matvec_csr
    #:for k1, t1, s1 in (KINDS_TYPES)
    #:for rank in RANKS
    subroutine matvec_csr_${rank}$d_${s1}$(matrix,vec_x,vec_y)
        type(CSR_${s1}$), intent(in) :: matrix
        ${t1}$, intent(in)    :: vec_x${ranksuffix(rank)}$
        ${t1}$, intent(inout) :: vec_y${ranksuffix(rank)}$
        integer :: i, j
        #:if rank == 1
        ${t1}$ :: aux
        #:else
        ${t1}$ :: aux(size(vec_x,dim=1))
        #:endif

        associate( data => matrix%data, col => matrix%col, rowptr => matrix%rowptr, &
            & nnz => matrix%nnz, nrows => matrix%nrows, ncols => matrix%ncols, sym => matrix%sym )
            if( sym == k_NOSYMMETRY) then
                do concurrent(i=1:nrows)
                    do j = rowptr(i), rowptr(i+1)-1
                        vec_y(${rksfx2(rank-1)}$i) = vec_y(${rksfx2(rank-1)}$i) + data(j) * vec_x(${rksfx2(rank-1)}$col(j))
                    end do
                end do

            else if( sym == k_SYMTRIINF )then
                do i = 1 , nrows
                    aux  = zero_${s1}$
                    do j = rowptr(i), rowptr(i+1)-2
                        aux = aux + data(j) * vec_x(${rksfx2(rank-1)}$col(j))
                        vec_y(${rksfx2(rank-1)}$col(j)) = vec_y(${rksfx2(rank-1)}$col(j)) + data(j) * vec_x(${rksfx2(rank-1)}$i)
                    end do
                    aux = aux + data(j) * vec_x(${rksfx2(rank-1)}$i)
                    vec_y(${rksfx2(rank-1)}$i) = vec_y(${rksfx2(rank-1)}$i) + aux
                end do

            else if( sym == k_SYMTRISUP )then
                do i = 1 , nrows
                    aux  = vec_x(${rksfx2(rank-1)}$i) * data(rowptr(i))
                    do j = rowptr(i)+1, rowptr(i+1)-1
                        aux = aux + data(j) * vec_x(${rksfx2(rank-1)}$col(j))
                        vec_y(${rksfx2(rank-1)}$col(j)) = vec_y(${rksfx2(rank-1)}$col(j)) + data(j) * vec_x(${rksfx2(rank-1)}$i)
                    end do
                    vec_y(${rksfx2(rank-1)}$i) = vec_y(${rksfx2(rank-1)}$i) + aux
                end do

            end if
        end associate
    end subroutine
    
    #:endfor
    #:endfor

    !! matvec_csc
    #:for k1, t1, s1 in (KINDS_TYPES)
    #:for rank in RANKS
    subroutine matvec_csc_${rank}$d_${s1}$(matrix,vec_x,vec_y)
        type(CSC_${s1}$), intent(in) :: matrix
        ${t1}$, intent(in)    :: vec_x${ranksuffix(rank)}$
        ${t1}$, intent(inout) :: vec_y${ranksuffix(rank)}$
        integer :: i, j
        #:if rank == 1
        ${t1}$ :: aux
        #:else
        ${t1}$ :: aux(size(vec_x,dim=1))
        #:endif

        associate( data => matrix%data, colptr => matrix%colptr, row => matrix%row, &
            & nnz => matrix%nnz, nrows => matrix%nrows, ncols => matrix%ncols, sym => matrix%sym )
            if( sym == k_NOSYMMETRY) then
                do concurrent(j=1:ncols)
                    do i = colptr(j), colptr(j+1)-1
                        vec_y(${rksfx2(rank-1)}$row(i)) = vec_y(${rksfx2(rank-1)}$row(i)) + data(i) * vec_x(${rksfx2(rank-1)}$j)
                    end do
                end do

            else if( sym == k_SYMTRIINF )then
                ! NOT TESTED
                do j = 1 , ncols
                    aux  = vec_x(${rksfx2(rank-1)}$j) * data(colptr(j))
                    do i = colptr(j)+1, colptr(j+1)-1
                        aux = aux + data(i) * vec_x(${rksfx2(rank-1)}$row(i))
                        vec_y(${rksfx2(rank-1)}$row(i)) = vec_y(${rksfx2(rank-1)}$row(i)) + data(i) * vec_x(${rksfx2(rank-1)}$j)
                    end do
                    vec_y(${rksfx2(rank-1)}$j) = vec_y(${rksfx2(rank-1)}$j) + aux
                end do

            else if( sym == k_SYMTRISUP )then
                ! NOT TESTED
                do j = 1 , ncols
                    aux  = zero_${s1}$
                    do i = colptr(j), colptr(i+1)-2
                        aux = aux + data(i) * vec_x(${rksfx2(rank-1)}$j)
                        vec_y(${rksfx2(rank-1)}$i) = vec_y(${rksfx2(rank-1)}$i) + data(i) * vec_x(${rksfx2(rank-1)}$row(i))
                    end do
                    aux = aux + data(colptr(j)) * vec_x(${rksfx2(rank-1)}$j)
                    vec_y(${rksfx2(rank-1)}$j) = vec_y(${rksfx2(rank-1)}$j) + aux
                end do
                
            end if
        end associate
    end subroutine
    
    #:endfor
    #:endfor

    !! matvec_ell
    #:for k1, t1, s1 in (KINDS_TYPES)
    #:for rank in RANKS
    subroutine matvec_ell_${rank}$d_${s1}$(matrix,vec_x,vec_y)
        type(ELL_${s1}$), intent(in) :: matrix
        ${t1}$, intent(in)    :: vec_x${ranksuffix(rank)}$
        ${t1}$, intent(inout) :: vec_y${ranksuffix(rank)}$
        integer :: i, j, k

        associate( data => matrix%data, index => matrix%index, MNZ_P_ROW => matrix%K, &
            & nnz => matrix%nnz, nrows => matrix%nrows, ncols => matrix%ncols, sym => matrix%sym )
            if( sym == k_NOSYMMETRY) then
                do concurrent (i = 1:nrows, k = 1:MNZ_P_ROW)
                    j = index(i,k)
                    if(j>0) vec_y(${rksfx2(rank-1)}$i) = vec_y(${rksfx2(rank-1)}$i) + data(i,k) * vec_x(${rksfx2(rank-1)}$j)
                end do
                
            end if
        end associate
    end subroutine
    
    #:endfor
    #:endfor
    
end module fsparse_matvec